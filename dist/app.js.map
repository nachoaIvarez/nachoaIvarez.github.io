{"version":3,"sources":["app.js","js/main.js","js/dom-helpers.js"],"names":["System","register","_export","toggleClass","hasClass","toggle","main","nav","setters","_jsDomHelpersJs","execute","document","getElementById","getElementsByTagName","addEventListener","removeClass","element","className","classList","remove","replace","RegExp","split","join","addClass","add","contains","test","classes","existingIndex","indexOf","splice","push","ready","fn","readyState","htmlEscape","str","html","literalSections","raw","result","_len","arguments","length","substs","Array","_key","forEach","subst","i","lit","isArray","endsWith","slice","capitalize","charAt","toUpperCase","this"],"mappings":"AAAAA,OAAOC,SAAS,cAAe,qBAAsB,SAAUC,GAC7D,YAEA,IAAIC,GAAaC,ECCbC,EACAC,EACAC,CDFJ,QACEC,SAAU,SAAUC,GAClBN,EAAcM,ECJXN,YDKHC,EAAWK,ECLKL,WDOlBM,QAAS,WCTb,YAIML,GAASM,SAASC,eAAe,QACjCN,EAAOK,SAASE,qBAAqB,QAAQ,GAC7CN,EAAMI,SAASE,qBAAqB,OAAO,GAEjDR,EAAOS,iBAAiB,QAAS,WAC/BX,EAAYG,EAAM,UAClBH,EAAYI,EAAK,YAGnBD,EAAKQ,iBAAiB,QAAS,WACxBV,EAASE,EAAM,YAClBH,EAAYG,EAAM,UAClBH,EAAYI,EAAK,iBDcrBP,OAAOC,SAAS,uBAAyB,SAAUC,GACjD,YE/BK,SAASa,GAAYC,EAASC,GAC/BD,EAAQE,UACVF,EAAQE,UAAUC,OAAOF,GAEzBD,EAAQC,UAAYD,EAAQC,UAAUG,QAAQ,GAAIC,QAAO,UAAYJ,EAAUK,MAAM,KAAKC,KAAK,KAAO,UAAW,MAAO,KAIrH,QAASC,GAASR,EAASC,GAC5BD,EAAQE,UACVF,EAAQE,UAAUO,IAAIR,GAEtBD,EAAQC,WAAa,IAAMA,EAIxB,QAASb,GAASY,EAASC,GAC5BD,EAAQE,UACVF,EAAQE,UAAUQ,SAAST,GAE3B,GAAII,QAAO,QAAUJ,EAAY,QAAS,MAAMU,KAAKX,EAAQC,WAI1D,QAASd,GAAYa,EAASC,GACnC,GAAID,EAAQE,UACVF,EAAQE,UAAUb,OAAOY,OACpB,CACL,GAAIW,GAAUZ,EAAQC,UAAUK,MAAM,KAClCO,EAAgBD,EAAQE,QAAQb,EAEhCY,IAAiB,EACnBD,EAAQG,OAAOF,EAAe,GAE9BD,EAAQI,KAAKf,GAGfD,EAAQC,UAAYW,EAAQL,KAAK,MAI9B,QAASU,GAAMC,GACQ,YAAxBvB,SAASwB,WACXD,IAEAvB,SAASG,iBAAiB,mBAAoBoB,GAIlD,QAASE,GAAWC,GAClB,MAAOA,GAAIjB,QAAQ,KAAM,SACtBA,QAAQ,KAAM,QACdA,QAAQ,KAAM,QACdA,QAAQ,KAAM,UACdA,QAAQ,KAAM,SACdA,QAAQ,KAAM,SAGZ,QAASkB,GAAKC,GFkDjB,IAAK,GE/CHC,GAAMD,EAAgBC,IAEtBC,EAAS,GF6CFC,EAAOC,UAAUC,OElDWC,EAAMC,MAAAJ,EAAA,EAAAA,EAAA,EAAA,GAAAK,EAAA,EAAAL,EAAAK,EAAAA,IAANF,EAAME,EAAA,GAAAJ,UAAAI,EAiC7C,OA1BAF,GAAOG,QAAQ,SAACC,EAAOC,GAGrB,GAAIC,GAAMX,EAAIU,EAKVJ,OAAMM,QAAQH,KAChBA,EAAQA,EAAM1B,KAAK,KAKjB4B,EAAIE,SAAS,OACfJ,EAAQb,EAAWa,GACnBE,EAAMA,EAAIG,MAAM,EAAG,KAErBb,GAAUU,EACVV,GAAUQ,IAKZR,GAAUD,EAAIA,EAAII,OAAS,GAKtB,QAASW,GAAWlB,GACvB,MAAOA,GAAImB,OAAO,GAAGC,cAAgBC,KAAKJ,MAAM,GFkDlD,MAhHApD,GAAQ,cAAea,GAEvBb,EAAQ,WAAYsB,GAEpBtB,EAAQ,WAAYE,GAEpBF,EAAQ,cAAeC,GAEvBD,EAAQ,QAAS+B,GAEjB/B,EAAQ,OAAQoC,GAEhBpC,EAAQ,aAAcqD,IAqGpB/C,WACAE,QAAS","file":"app.js","sourcesContent":["System.register('js/main.js', ['js/dom-helpers.js'], function (_export) {\n  'use strict';\n\n  var toggleClass, hasClass, toggle, main, nav;\n  return {\n    setters: [function (_jsDomHelpersJs) {\n      toggleClass = _jsDomHelpersJs.toggleClass;\n      hasClass = _jsDomHelpersJs.hasClass;\n    }],\n    execute: function () {\n      'format es6';\n\n      toggle = document.getElementById('menu');\n      main = document.getElementsByTagName('main')[0];\n      nav = document.getElementsByTagName('nav')[0];\n\n      toggle.addEventListener('click', function () {\n        toggleClass(main, 'active');\n        toggleClass(nav, 'active');\n      });\n\n      main.addEventListener('click', function () {\n        if (!hasClass(main, 'active')) {\n          toggleClass(main, 'active');\n          toggleClass(nav, 'active');\n        }\n      });\n    }\n  };\n});\nSystem.register('js/dom-helpers.js', [], function (_export) {\n  'use strict';\n\n  _export('removeClass', removeClass);\n\n  _export('addClass', addClass);\n\n  _export('hasClass', hasClass);\n\n  _export('toggleClass', toggleClass);\n\n  _export('ready', ready);\n\n  _export('html', html);\n\n  _export('capitalize', capitalize);\n\n  function removeClass(element, className) {\n    if (element.classList) {\n      element.classList.remove(className);\n    } else {\n      element.className = element.className.replace(new RegExp('(^|\\\\b)' + className.split(' ').join('|') + '(\\\\b|$)', 'gi'), ' ');\n    }\n  }\n\n  function addClass(element, className) {\n    if (element.classList) {\n      element.classList.add(className);\n    } else {\n      element.className += ' ' + className;\n    }\n  }\n\n  function hasClass(element, className) {\n    if (element.classList) {\n      element.classList.contains(className);\n    } else {\n      new RegExp('(^| )' + className + '( |$)', 'gi').test(element.className);\n    }\n  }\n\n  function toggleClass(element, className) {\n    if (element.classList) {\n      element.classList.toggle(className);\n    } else {\n      var classes = element.className.split(' ');\n      var existingIndex = classes.indexOf(className);\n\n      if (existingIndex >= 0) {\n        classes.splice(existingIndex, 1);\n      } else {\n        classes.push(className);\n      }\n\n      element.className = classes.join(' ');\n    }\n  }\n\n  function ready(fn) {\n    if (document.readyState !== 'loading') {\n      fn();\n    } else {\n      document.addEventListener('DOMContentLoaded', fn);\n    }\n  }\n\n  function htmlEscape(str) {\n    return str.replace(/&/g, '&amp;') // first!\n    .replace(/>/g, '&gt;').replace(/</g, '&lt;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;').replace(/`/g, '&#96;');\n  }\n\n  function html(literalSections) {\n    // Use raw literal sections: we don’t want\n    // backslashes (\\n etc.) to be interpreted\n    var raw = literalSections.raw;\n\n    var result = '';\n\n    for (var _len = arguments.length, substs = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      substs[_key - 1] = arguments[_key];\n    }\n\n    substs.forEach(function (subst, i) {\n      // Retrieve the literal section preceding\n      // the current substitution\n      var lit = raw[i];\n\n      // In the example, map() returns an array:\n      // If substitution is an array (and not a string),\n      // we turn it into a string\n      if (Array.isArray(subst)) {\n        subst = subst.join('');\n      }\n\n      // If the substitution is preceded by a dollar sign,\n      // we escape special characters in it\n      if (lit.endsWith('$')) {\n        subst = htmlEscape(subst);\n        lit = lit.slice(0, -1);\n      }\n      result += lit;\n      result += subst;\n    });\n    // Take care of last literal section\n    // (Never fails, because an empty template string\n    // produces one literal section, an empty string)\n    result += raw[raw.length - 1]; // (A)\n\n    return result;\n  }\n\n  function capitalize(str) {\n    return str.charAt(0).toUpperCase() + this.slice(1);\n  }\n\n  return {\n    setters: [],\n    execute: function () {}\n  };\n});\n//# sourceMappingURL=app.js.map","'format es6';\n\nimport { toggleClass, hasClass } from 'js/dom-helpers';\n\nconst toggle = document.getElementById('menu');\nconst main = document.getElementsByTagName('main')[0];\nconst nav = document.getElementsByTagName('nav')[0];\n\ntoggle.addEventListener('click', function() {\n  toggleClass(main, 'active');\n  toggleClass(nav, 'active');\n});\n\nmain.addEventListener('click', function() {\n  if (!hasClass(main, 'active')) {\n    toggleClass(main, 'active');\n    toggleClass(nav, 'active');\n  }\n});\n","export function removeClass(element, className) {\n  if (element.classList) {\n    element.classList.remove(className);\n  } else {\n    element.className = element.className.replace(new RegExp('(^|\\\\b)' + className.split(' ').join('|') + '(\\\\b|$)', 'gi'), ' ');\n  }\n}\n\nexport function addClass(element, className) {\n  if (element.classList) {\n    element.classList.add(className);\n  } else {\n    element.className += ' ' + className;\n  }\n}\n\nexport function hasClass(element, className) {\n  if (element.classList) {\n    element.classList.contains(className);\n  } else {\n    new RegExp('(^| )' + className + '( |$)', 'gi').test(element.className);\n  }\n}\n\nexport function toggleClass(element, className) {\n  if (element.classList) {\n    element.classList.toggle(className);\n  } else {\n    var classes = element.className.split(' ');\n    var existingIndex = classes.indexOf(className);\n\n    if (existingIndex >= 0) {\n      classes.splice(existingIndex, 1);\n    } else {\n      classes.push(className);\n    }\n\n    element.className = classes.join(' ');\n  }\n}\n\nexport function ready(fn) {\n  if (document.readyState !== 'loading') {\n    fn();\n  } else {\n    document.addEventListener('DOMContentLoaded', fn);\n  }\n}\n\nfunction htmlEscape(str) {\n  return str.replace(/&/g, '&amp;') // first!\n    .replace(/>/g, '&gt;')\n    .replace(/</g, '&lt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#39;')\n    .replace(/`/g, '&#96;');\n}\n\nexport function html(literalSections, ...substs) {\n  // Use raw literal sections: we don’t want\n  // backslashes (\\n etc.) to be interpreted\n  let raw = literalSections.raw;\n\n  let result = '';\n\n  substs.forEach((subst, i) => {\n    // Retrieve the literal section preceding\n    // the current substitution\n    let lit = raw[i];\n\n    // In the example, map() returns an array:\n    // If substitution is an array (and not a string),\n    // we turn it into a string\n    if (Array.isArray(subst)) {\n      subst = subst.join('');\n    }\n\n    // If the substitution is preceded by a dollar sign,\n    // we escape special characters in it\n    if (lit.endsWith('$')) {\n      subst = htmlEscape(subst);\n      lit = lit.slice(0, -1);\n    }\n    result += lit;\n    result += subst;\n  });\n  // Take care of last literal section\n  // (Never fails, because an empty template string\n  // produces one literal section, an empty string)\n  result += raw[raw.length - 1]; // (A)\n\n  return result;\n}\n\nexport function capitalize(str) {\n    return str.charAt(0).toUpperCase() + this.slice(1);\n}\n"],"sourceRoot":"/source/"}