"use strict";

var gulp = require("gulp");
var plugins = require("gulp-load-plugins")();
var browserSync = require("browser-sync");
var runSequence = require("run-sequence");

// BrowserSync Server
gulp.task("browser-sync", function() {
  browserSync.init([
    "src/css/*.css",
    "src/js/**/*.js",
    "src/**/*.html"
  ], {
    notify: false,
    server: {
      baseDir: ["src"]
    },
    port: 666,
    browser: [],
    tunnel: false
  });
});

// SASS
gulp.task("sass", function() {
  return gulp.src("src/scss/*.scss")
    .pipe(plugins.sourcemaps.init())
    .pipe(plugins.sass())
    .pipe(plugins.sourcemaps.write({includeContent: false}))
    .pipe(plugins.sourcemaps.init({loadMaps: true})) // Load sourcemaps generated by sass
    .pipe(plugins.autoprefixer({browsers: ["last 2 versions"]}))
    .on("error", plugins.util.log)
    .pipe(plugins.sourcemaps.write("."))
    .pipe(gulp.dest("src/css"))
    .on("error", plugins.util.log);
});

// Copy files to "dist"
gulp.task("files", function () {
  return gulp.src(["src/*.*", "CNAME"], {dot: true}).pipe(gulp.dest("dist"));
});

// Delete dist Directory
gulp.task("clean", require("del").bind(null, ["dist"]));

// CSS
gulp.task("css", function() {
  return gulp.src("src/css/*.css")
    .pipe(plugins.csso())
    .pipe(gulp.dest("dist/css"))
    .on("error", plugins.util.log);
});

gulp.task("images", function () {
  return gulp.src("src/images/**/*")
    .pipe(plugins.cache(plugins.imagemin({
      progressive: true,
      interlaced: true,
      // don"t remove IDs from SVGs, they are often used
      // as hooks for embedding and styling
      svgoPlugins: [{cleanupIDs: false}]
    })))
    .pipe(gulp.dest("dist/images"));
});

gulp.task("lint", function() {
  return gulp.src(["src/js/**/*.js"])
    .pipe(plugins.cached("js")) //Process only changed files
    .pipe(plugins.eslint())
    .pipe(plugins.eslint.format())
    .pipe(plugins.eslint.failOnError());
});

gulp.task("jspm", function() {
  return gulp.src("src/jspm_packages/**/*").pipe(gulp.dest("dist/jspm_packages"));
});

gulp.task("js", ["lint"], function() {
  return gulp.src("src/js/**/*.js").pipe(gulp.dest("dist/js"));
});

// Bundle with jspm
gulp.task("bundle", ["js", "jspm"], plugins.shell.task([
  "cd dist; jspm bundle js/main app.js"
]));

gulp.task("html", function() {
  var opts = {
    conditionals: true
  };
  return gulp.src("src/**/*.html")
    .pipe(plugins.minifyHtml(opts))
    .pipe(gulp.dest("dist"));
});

// Uglify the bundle
gulp.task("uglify", function() {
  return gulp.src("dist/app.js")
    .pipe(plugins.sourcemaps.init({
      loadMaps: true
    }))
    .pipe(plugins.uglify())
    .pipe(plugins.sourcemaps.write("."))
    .pipe(gulp.dest("dist"))
    .on("error", plugins.util.log);
});

gulp.task("gzip", function() {
  return gulp.src("dist/**/*").pipe(plugins.size({title: "build", gzip: true}));
});

// serve task
gulp.task("serve", ["browser-sync", "sass", "lint"], function() {
  gulp.watch("src/sass/**/*.scss", ["sass"]);
  gulp.watch("src/js/**/*.js", ["lint"]);
});

// Default
gulp.task("default", ["serve"]);

gulp.task("push", function() {
  return gulp.src("dist/**/*")
    .pipe(plugins.ghPages({branch: "master"}));
});


gulp.task("build", function() {
  runSequence(
    "clean",
    "files",
    "sass",
    ["css", "images", "html", "bundle"],
    "uglify",
    "gzip"
  );
});

gulp.task("deploy", function() {
  runSequence(
    "clean",
    "files",
    "sass",
    ["css", "images", "html", "bundle"],
    "uglify",
    "gzip",
    "push"
  );
});
